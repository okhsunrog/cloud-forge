{# roles/nginx/templates/cloud.conf.j2 #}
{% set cloud_ip = reverse_proxy.nas_ip %}
{% set cloud_port = reverse_proxy.ports.nextcloud %}

{% for domain in domains.nginx.cloud %}
server {
    listen {{ ports.internal.nginx_https }} ssl http2 proxy_protocol;
    server_name {{ domain }};
    
    set_real_ip_from 127.0.0.1;
    real_ip_header proxy_protocol;
    
    client_max_body_size 20000M;
    
    # Security headers
    add_header Strict-Transport-Security "max-age=15552000; includeSubDomains; preload" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;

    ssl_certificate /etc/letsencrypt/live/{{ domain }}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/{{ domain }}/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    location / {
        proxy_pass http://{{ cloud_ip }}:{{ cloud_port }};
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP       $proxy_protocol_addr;
        proxy_set_header X-Forwarded-For $proxy_protocol_addr;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Protocol $scheme;
        proxy_set_header X-Forwarded-Host $http_host;

        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        proxy_buffering off;
    }

    location /.well-known/carddav {
        return 301 $scheme://$host/remote.php/dav;
    }

    location /.well-known/caldav {
        return 301 $scheme://$host/remote.php/dav;
    }
}
{% endfor %}

# HTTP redirect server block
server {
    listen 80 proxy_protocol;
    server_name {% for domain in domains.nginx.cloud %}{{ domain }} {% endfor %};
    
    set_real_ip_from 127.0.0.1;
    real_ip_header proxy_protocol;
    
    return 301 https://$host$request_uri;
}
