{# roles/nginx/templates/jellyfin.conf.j2 #}
{% set jellyfin_ip = reverse_proxy.nas_ip | default('10.66.66.2') %}
{% set jellyfin_port = reverse_proxy.ports.jellyfin | default(8096) %}

{% for domain in domains.nginx.jellyfin %}
server {
    listen {{ ports.internal.nginx_https }} ssl http2 proxy_protocol;
    server_name {{ domain }};
    
    set_real_ip_from 127.0.0.1;
    real_ip_header proxy_protocol;
    
    client_max_body_size 20000M;

    # SSL configuration
    ssl_certificate /etc/letsencrypt/live/{{ domain }}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/{{ domain }}/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-Content-Type-Options "nosniff";
    add_header Content-Security-Policy "default-src https: data: blob: ; img-src 'self' https://* ; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline' https://www.gstatic.com https://www.youtube.com blob:; worker-src 'self' blob:; connect-src 'self'; object-src 'none'; frame-ancestors 'self'";

    location = / {
        return 302 https://$host/web/;
    }

    location / {
        proxy_pass http://{{ jellyfin_ip }}:{{ jellyfin_port }};
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP       $proxy_protocol_addr;
        proxy_set_header X-Forwarded-For $proxy_protocol_addr;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Protocol $scheme;
        proxy_set_header X-Forwarded-Host $http_host;
        
        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        proxy_buffering off;
    }

    location = /web/ {
        proxy_pass http://{{ jellyfin_ip }}:{{ jellyfin_port }}/web/index.html;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP       $proxy_protocol_addr;
        proxy_set_header X-Forwarded-For $proxy_protocol_addr;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Protocol $scheme;
        proxy_set_header X-Forwarded-Host $http_host;
    }

    location /socket {
        proxy_pass http://{{ jellyfin_ip }}:{{ jellyfin_port }};
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP       $proxy_protocol_addr;
        proxy_set_header X-Forwarded-For $proxy_protocol_addr;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Protocol $scheme;
        proxy_set_header X-Forwarded-Host $http_host;
    }
}
{% endfor %}

# HTTP redirect server block
server {
    listen 80 proxy_protocol;
    server_name {% for domain in domains.nginx.jellyfin %}{{ domain }} {% endfor %};
    
    set_real_ip_from 127.0.0.1;
    real_ip_header proxy_protocol;
    
    return 301 https://$host$request_uri;
}
